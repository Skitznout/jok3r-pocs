#!/usr/bin/env python3
# -*- coding: utf-8 -*-
###
### Core > Exploit 
###
import re
import sys
import subprocess

from lib.core.Command import Command
from lib.core.Config import *
from lib.core.Exceptions import CommandException
from lib.core.Logger import logger
from lib.core.ScriptTemplates import *
from lib.utils.NetUtils import NetUtils

class Exploit:

    def __init__(self, name, description, type_, rawcmd, success=''):
        self.name = name
        self.description = description
        self.type = type_
        self.rawcmd = rawcmd
        self.success = success
        self.directory = TOOL_BASEPATH + '/exploits/' + self.name.lower()
        self.output = ''


    def run(self, target):
        try:
            self.command = Command(self.rawcmd, self.type)
        except CommandException as e:
            logger.error(e)
            return None

        # Build script to run
        if self.type == 'rce-blind':
            logger.warning('WARNING: This attack box must be reachable from the target !')
            logger.info('If target is vulnerable, exploit will try to ping local ' \
                'IP = {localip} from target'.format(
                    localip=NetUtils.get_local_ip_address()))

            cmdline = self.command.get_cmdline(target)
            print(cmdline)

            script = SCRIPT_RCE_BLIND.format(
                exploit_dir=self.directory,
                command=cmdline)

        elif self.type in ('rce-standard', 'sqli'):
            script  = 'cd {exploit_dir}; '.format(exploit_dir=self.directory)
            script += self.command.get_cmdline(target)

        else:
            logger.error('Unsupported exploit type')
            return None

        # Run subprocess
        try:
            logger.info('Exploit will be run from directory: {directory}'.format(
                directory=self.directory))

            proc = subprocess.Popen(script, 
                                    shell=True, 
                                    stdout=subprocess.PIPE, 
                                    stderr=subprocess.STDOUT)

            # Agressivelly get the output
            while True:
                out = proc.stdout.read(1)
                # We put that inside try block to avoid utf8 decoding error
                try:
                    out = out.decode(sys.stdout.encoding)
                    sys.stdout.write(out)
                    self.output += out
                except:
                    pass

                # Break if process has finished
                if out == ''  and proc.poll() != None:
                    break

        except Exception as e:
            logger.error('Error when trying to run command: {exception}'.format(
                exception=e))
            return None

        return self.output


    def check_success(self):
        if self.type == 'rce-blind':
            m = re.search(MATCHING_PATTERN_RCE_BLIND_ICMP, self.output, re.IGNORECASE)
            if not m:
                m = re.search(MATCHING_PATTERN_RCE_BLIND_HTTP, self.output, re.IGNORECASE)

        elif self.type in ('rce-standard', 'sqli'):
            m = re.search(self.success, self.output, re.IGNORECASE)

        return (m is not None)
            
